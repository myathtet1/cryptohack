

# This file was *autogenerated* from the file main.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_16 = Integer(16); _sage_const_99061670249353652702595159229088680425828208953931838069069584252923270946291 = Integer(99061670249353652702595159229088680425828208953931838069069584252923270946291); _sage_const_4 = Integer(4); _sage_const_43190960452218023575787899214023014938926631792651638044680168600989609069200 = Integer(43190960452218023575787899214023014938926631792651638044680168600989609069200); _sage_const_20971936269255296908588589778128791635639992476076894152303569022736123671173 = Integer(20971936269255296908588589778128791635639992476076894152303569022736123671173); _sage_const_87360200456784002948566700858113190957688355783112995047798140117594305287669 = Integer(87360200456784002948566700858113190957688355783112995047798140117594305287669); _sage_const_6082896373499126624029343293750138460137531774473450341235217699497602895121 = Integer(6082896373499126624029343293750138460137531774473450341235217699497602895121); _sage_const_2 = Integer(2)
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import hashlib
from sage.all import *

def is_pkcs7_padded(message):
    padding = message[-message[-_sage_const_1 ]:]
    return all(padding[i] == len(padding) for i in range(_sage_const_0 , len(padding)))

def decrypt_flag(shared_secret: int, iv: str, ciphertext: str):
    # Derive AES key from shared secret
    sha1 = hashlib.sha1()
    sha1.update(str(shared_secret).encode('ascii'))
    key = sha1.digest()[:_sage_const_16 ]
    # Decrypt flag
    ciphertext = bytes.fromhex(ciphertext)
    iv = bytes.fromhex(iv)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plaintext = cipher.decrypt(ciphertext)

    if is_pkcs7_padded(plaintext):
        return unpad(plaintext, _sage_const_16 ).decode('ascii')
    else:
        return plaintext.decode('ascii')

p = _sage_const_99061670249353652702595159229088680425828208953931838069069584252923270946291 
a = _sage_const_1 
b = _sage_const_4 
E = EllipticCurve(GF(p), [a,b])
G = E(_sage_const_43190960452218023575787899214023014938926631792651638044680168600989609069200 , _sage_const_20971936269255296908588589778128791635639992476076894152303569022736123671173 )
P_A = E.lift_x(ZZ(_sage_const_87360200456784002948566700858113190957688355783112995047798140117594305287669 ))
P_B = E.lift_x(ZZ(_sage_const_6082896373499126624029343293750138460137531774473450341235217699497602895121 ))

primes = [p for p, _ in E.order().factor()][:-_sage_const_2 ]
dlogs = []
for fac in primes:
    t = int(G.order()) // int(fac)
    dlog = (t*G).discrete_log(t*P_A)
    dlogs += [dlog]
nA = crt(dlogs, primes)
shared_secret = (nA*P_B).xy()[_sage_const_0 ]

iv = "ceb34a8c174d77136455971f08641cc5"
ciphertext = "b503bf04df71cfbd3f464aec2083e9b79c825803a4d4a43697889ad29eb75453"
print(decrypt_flag(shared_secret, iv, ciphertext))

