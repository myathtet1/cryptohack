

# This file was *autogenerated* from the file real_einstein.sage
from sage.all_cmdline import *   # import sage library

_sage_const_100 = Integer(100); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_5 = Integer(5); _sage_const_7 = Integer(7); _sage_const_11 = Integer(11); _sage_const_13 = Integer(13); _sage_const_17 = Integer(17); _sage_const_19 = Integer(19); _sage_const_23 = Integer(23); _sage_const_29 = Integer(29); _sage_const_31 = Integer(31); _sage_const_37 = Integer(37); _sage_const_41 = Integer(41); _sage_const_43 = Integer(43); _sage_const_47 = Integer(47); _sage_const_53 = Integer(53); _sage_const_59 = Integer(59); _sage_const_61 = Integer(61); _sage_const_67 = Integer(67); _sage_const_71 = Integer(71); _sage_const_73 = Integer(73); _sage_const_79 = Integer(79); _sage_const_83 = Integer(83); _sage_const_89 = Integer(89); _sage_const_97 = Integer(97); _sage_const_101 = Integer(101); _sage_const_103 = Integer(103); _sage_const_1350995397927355657956786955603012410260017344805998076702828160316695004588429433 = Integer(1350995397927355657956786955603012410260017344805998076702828160316695004588429433); _sage_const_16 = Integer(16); _sage_const_64 = Integer(64); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_10 = Integer(10)
import math
from decimal import *
import numpy
getcontext().prec = int(_sage_const_100 )

FLAG = "crypto{???????????????}"
PRIMES = [_sage_const_2 , _sage_const_3 , _sage_const_5 , _sage_const_7 , _sage_const_11 , _sage_const_13 , _sage_const_17 , _sage_const_19 , _sage_const_23 , _sage_const_29 , _sage_const_31 , _sage_const_37 , _sage_const_41 , _sage_const_43 , _sage_const_47 , _sage_const_53 , _sage_const_59 , _sage_const_61 , _sage_const_67 , _sage_const_71 , _sage_const_73 , _sage_const_79 , _sage_const_83 , _sage_const_89 , _sage_const_97 , _sage_const_101 , _sage_const_103 ]

ciphertext = _sage_const_1350995397927355657956786955603012410260017344805998076702828160316695004588429433 

keys = []
for p in PRIMES:
    keys.append(Decimal(int(p)).sqrt())

arr = []
for k in keys:
    arr.append(int(k * int(_sage_const_16 ) ** int(_sage_const_64 )))


def encrypt(res):
    h = Decimal(int(_sage_const_0 ))
    for i in range(len(keys)):
        h += res[i] * keys[i]
    ct = int(h * int(_sage_const_16 ) ** int(_sage_const_64 ))
    return ct


def f(N):
    size = len(arr)
    A = Matrix(ZZ, size + _sage_const_1 , size + _sage_const_1 )
    for i in range(size):
        A[i, i] = _sage_const_1 
        A[i, size] = arr[i] // N
        A[size, i] = _sage_const_64 

    A[size, size] = ciphertext // N
    res = A.LLL()

    for i in range(size + _sage_const_1 ):
        flag = True
        for j in range(size):
            if -_sage_const_64  <= res[i][j] < _sage_const_64 :
                continue
            flag = FLAG
            break
        if flag:
            vec = [int(v + _sage_const_64 ) for v in res[i][:-_sage_const_1 ]]
            ret = encrypt(vec)
            if ret == ciphertext:
                print(N, bytes(vec))


for i in range(_sage_const_1 , _sage_const_10 ):
    f(i)

